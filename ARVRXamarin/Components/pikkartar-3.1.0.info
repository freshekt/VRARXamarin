{"Name":"Pikkart AR SDK","Id":3778,"Alias":"pikkartar","Description":"\r\n# Details\r\nPikkart AR SDK Xamarin Component allows C# developers to embed augmented reality experiences into their Xamarin projects with virtual contents, like **3D objects and videos** in real-time or **location-based markers**.\r\n\r\nPikkart AR SDK is a part of the [Pikkart Augmented Reality Ecosystem](https://developer.pikkart.com), a complete software solution that includes:\r\n- [Pikkart AR SDK](https://developer.pikkart.com/augmented-reality/products/sdk.aspx) \r\n- [Pikkart AR Logo](https://developer.pikkart.com/augmented-reality/products/ar-logo.aspx) \r\n- [Pikkart Cloud Recognition](https://developer.pikkart.com/augmented-reality/products/cloud.aspx)\r\n- [Pikkart Cloud API](https://developer.pikkart.com/augmented-reality/products/cloud_api.aspx)\r\n\r\n### Features\r\n- **Image recognition**: light and powerful image recognition system, natively integrated with [Pikkart Cloud Recognition](https://developer.pikkart.com/augmented-reality/products/cloud.aspx) for a scalable solution;\r\n- **Tracking**: look at the [video](https://youtu.be/_M8iA52u0rk) to understand the robustness of the tracking;\r\n- **AR Logo**: same marker, different augmented reality contents, [learn more](https://developer.pikkart.com/augmented-reality/products/ar-logo.aspx); \r\n- **Geo augmented markers**: integrate navigation services and augmented reality.\r\n\r\n### Free trial\r\nBy default the Pikkart AR SDK comes with no valid license key. \r\nPikkart AR SDK is available for free for evaluation purposes as a trial version. If you like to use it in a commercial, non-commercial or educational environment you need to purchase a according license. \r\n\r\n##### How to obtain a trial licence\r\nYou need to [sign up](https://developer.pikkart.com/servizi/registrazione/apriregistrazione.aspx) in Pikkart Developer Portal. If you already have a Pikkart account you just have to [sign in](https://developer.pikkart.com/servizi/autorizzazioni/login_fase01.aspx) to access your Control Panel. Click on the \"Apps\" section to see the list of your SDK licenses, then click \"download\" and select the target license (Android or iOS).\r\n\r\n### Tutorials\r\nInside the [Pikkart Developer Portal](https://developer.pikkart.com) you will find a series of [instructional articles and specifications](https://developer.pikkart.com/servizi/Menu/dinamica.aspx?ID=1570)  that detail how to implement the various features of Pikkart\u0027s AR SDK on Xamarin platform. \r\n\r\n### Release Notes\r\n\r\nSee [release notes](https://developer.pikkart.com/contenuto/contenuti--ecm/release-notes.ashx) in Pikkart Developer Portal for details.","Version":"3.1.0","Summary":"Pikkart AR SDK is an augmented reality software development kit for mobile apps.","QuickStart":"# Pikkart AR SDK Xamarin Component\r\nThis guide is designed to help you in your very first steps with Pikkart AR SDK  for developing your augmented reality project with image recognition.\r\nIn [Pikkart Developer Portal](https://developer.pikkart.com) you will find other [tutorials](https://developer.pikkart.com/servizi/Menu/dinamica.aspx?ID=1570) regarding also augmented reality based on geolocation services.\r\n\r\n\r\n### Android SDK API Usage\r\n1.\tCopy the license file (license.spz) we provided to you (or the trial license) inside your app assets dir (\u003cproject-root\u003e/Assets/, create this dir if it doesn\u0027t exist).\r\n2.\tAdd the following permissions in the Android Manifest tab in the project properties :\r\n- CAMERA\r\n- READ_EXTERNAL_STORAGE \r\n- WRITE_EXTERNAL_STORAGE \r\n3.\t In the Manifest.xml file add the following permissions in the \u003cmanifest\u003e tag\r\n```sh\r\n\u003cuses-feature android:name=\"android.hardware.camera\" android:required=\"true\" /\u003e \r\n\u003cuses-feature android:glEsVersion=\"0x00020000\" android:required=\"true\" /\u003e \r\n\u003cuses-sdk android:targetSdkVersion=\"21\" android:minSdkVersion=\"15\"/\u003e\r\n```\r\n4.\tIf you plan to use Pikkart\u0027s Cloud Recognition Service also add the following permissions:\r\n- INTERNET \r\n- ACCESS_NETWORK_STATE \r\n- ACCESS_WIFI_STATE \r\n5.\tFor Android 6+ the permission mechanism is a little different, use this code to handle the permissions or see the [Android Documentation](https://developer.android.com/training/permissions/requesting.html)\r\n\r\n```sh\r\nprivate int _permissionCode = 1234;\r\n\r\nprotected override void OnCreate(Bundle bundle) \r\n{\r\n\tbase.OnCreate(bundle);\r\n\tif (Build.Version.SdkInt \u003c BuildVersionCode.M)\r\n\t{\r\n\t\t//you don’t have to do anything, just init your app\r\n\t\tInitApp();\r\n\t}\r\n\telse \r\n\t{\r\n\t\tCheckPermissions(_permissionCode);\r\n\t}\t\t\t\r\n}\r\n\r\nprivate void CheckPermissions(int code)\r\n{\r\n\t\tstring[] permissions_required = new String[] {\r\n\t\t\tManifest.Permission.Camera,\r\n\t\t\tManifest.Permission.WriteExternalStorage,\r\n\t\t\tManifest.Permission.ReadExternalStorage \r\n\t\t};\r\n\tList\u003cstring\u003e permissions_not_granted_list = new List\u003cstring\u003e();\r\n\tforeach (string permission in permissions_required)\r\n \t{             \r\n\t\tif (ActivityCompat.CheckSelfPermission(ApplicationContext, permission) != Permission.Granted)\r\n\t\t{\r\n\t\t\tpermissions_not_granted_list.Add(permission); \r\n\t\t}\r\n\t}\r\n\tif (permissions_not_granted_list.Count \u003e 0) \r\n\t{\r\n\t\tString[] permissions = new String[permissions_not_granted_list.Count]; \r\n\t\tpermissions = permissions_not_granted_list.ToArray(); ActivityCompat.RequestPermissions(this, permissions, code); \r\n\t}\r\n\telse\r\n\t{\r\n\t\tInitApp();\r\n\t}\r\n}\r\n\r\npublic override void OnRequestPermissionsResult(int requestCode, string[] permissions, [GeneratedEnum] Permission[] grantResults)\r\n{\r\n\tif (requestCode == m_permissionCode)\r\n\t{\r\n\t\tbool ok = true;\r\n\t\tfor (int i = 0; i \u003c grantResults.Length; ++i)\r\n\t\t{\r\n\t\t\tok = ok \u0026\u0026 (grantResults[i] == Permission.Granted);\r\n\t\t}\r\n\t\tif (ok)\r\n\t\t{\r\n\t\t\tInitApp();\r\n\t\t}\r\n\t\telse\t\r\n\t\t{\r\n\t\t\tToast.MakeText(this, \"Error: required permissions not granted!\", ToastLength.Short).Show();\r\n\t\tFinish();\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n6.\tThe activity holding Pikkart\u0027s AR fragment ( Com.Pikkart.Ar.Recognition.RecognitionFragment ) must have set ConfigurationChanges = ConfigChanges.Orientation | ConfigChanges.ScreenSize in the ActivityAttribute as in the following example:\r\n```sh\r\n[Activity(Label = “XamarinAndroidGettingStarted”, MainLauncher = true, Icon = “@drawable/icon”, Theme = “@style/AppTheme”, ConfigurationChanges = ConfigChanges.Orientation | ConfigChanges.ScreenSize)]\r\npublic class MainActivity : AppCompatActivity, IRecognitionListener \r\n{\r\n\t...\r\n} \r\n```\r\n7.\tAdd Pikkart\u0027s AR Recognition Fragment to your AR activity. You can add it through your app layout XML file as:\r\n```sh\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cFrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_height=\"match_parent\" \r\n    android:layout_width=\"match_parent\"\r\n    android:id=\"@+id/rootLayout\"\u003e\r\n\u003cfragment android:layout_width=\"match_parent\" \r\n    android:layout_height=\"match_parent\"\r\n    android:id=\"@+id/pikkart_ar_fragment\"\r\n    android:name=\"com.pikkart.ar.recognition.RecognitionFragment\" /\u003e\r\n\u003c/FrameLayout\u003e\r\n```\r\n8.\tAll is set, now you just have to start the recognition process. You can do it (as an example) directly in you activity\u0027s OnCreate function: \r\n```sh\r\n_cameraFragment = FragmentManager.FindFragmentById\u003cRecognitionFragment\u003e(Resource.Id.pikkart_ar_fragment);\r\n_cameraFragment.StartRecognition(new RecognitionOptions(\r\n                    RecognitionOptions.RecognitionStorage.Local, \r\n                    RecognitionOptions.RecognitionMode.ContinuousScann, \r\n                    new CloudRecognitionInfo(new String[]{})\r\n                ), this);\r\n```\r\n9.\tIn the previous example we are using LOCAL marker recognition only (RecognitionManager.RecognitionStorage.Local), in this case you also need to add marker files to your app Asset folder. Move to that folder (usually \u003cproject-root\u003e/Assets/) or create it, create a new directory \"markers\" and copy into it the local marker you want your app to recognize. You can create and download those files using our Marker Manager Web App or you can use the ones provided with the SDK Sample package ( you can find the marker files in \u003csample-root\u003e/markers/).\r\n10.\tAs second parameter to our _cameraFragment.StartRecognition  function we have to pass a reference to a class implementing the interface IRecognitionListener  , in our example we are passing a reference to the AR activity itself witch need to override the following callback functions:\r\n```sh\r\npublic void ExecutingCloudSearch() { \r\n    //TODO: add your code here \r\n}\r\n```\r\nCalled every time Pikkart\u0027s AR sdk send a cloud recognition search query to our cloud recognition service.\r\n```sh\r\npublic void CloudMarkerNotFound() { \r\n    //TODO: add your code here \r\n}\r\n```\r\nCalled when a cloud recognition search query fails to find the captured image\r\n```sh\r\npublic void InternetConnectionNeeded() { \r\n    //TODO: add your code here \r\n} \r\n```\r\nInform that internet connection is not available (i.e. the app is set to use our cloud recognition service but the user has disabled internet connection).\r\n```sh\r\npublic void MarkerFound(Marker marker) { \r\n    //TODO: add your code here \r\n} \r\n```\r\nCalled when a marker search (either local or cloud based) successfully find a marker.\r\n```sh\r\npublic void MarkerNotFound() { \r\n    //TODO: add your code here \r\n} \r\n```\r\nCalled when a marker search fails to find a marker.\r\n```sh\r\npublic void MarkerTrackingLost(String markerId){ \r\n    //TODO: add your code here \r\n} \r\n```\r\nCalled when the SDK lose tracking of the given marker.\r\n```sh\r\npublic void ARLogoFound(string markerId, int code) { \r\n    //TODO: add your code here  \r\n}\r\n```\r\nCalled after markerFound when the ARLogo on the marker is found.\r\n```sh\r\npublic bool IsConnectionAvailable(Context context) { \r\n    //TODO: add your code here  \r\n}\r\n```\r\nInquire if a connection is available, to be implemented by the app developer. For a purely LOCAL search app you can simply return false here, otherwise use Android\u0027s NetworkInfo class\r\n11.\tNow you can use the various static functions and attributes of the RecognitionFragment class to get the state, matrices and marker data of the detected and tracked marker\r\n```sh\r\npublic static bool IsTracking { get; }\r\n\r\npublic static Marker CurrentMarker { get; }\r\n\r\npublic static float[] GetCurrentProjectionMatrix();\r\n\r\npublic static float[] GetCurrentModelViewMatrix();\r\n\r\npublic static void RenderCamera(int viewportWidth, int viewportHeight, int angle);\r\n```\r\nThe RenderCamera functions is particularly important because it allows your app to render the current camera image. This function needs to be called inside your OpenGL rendering cycle, see our tutorials for additional details.\r\n\r\n\r\n### iOS SDK API Usage\r\n1.\tCopy the license file (license.spz) we provided to you inside your app main bundle\r\n\r\n2.\tDeclare a subclass of PKTCameraController, our AR View Controller entry point  \r\n```sh           \r\nusing Pikkart.ArSdk.Recognition;\r\npublic class RecognitionViewController : PKTCameraController,IPKTIRecognitionListener\r\n```\r\n3.\tAll is set, now you just have to start the recognition process. You can do it\r\n\t(as an example) setting PKTCameraController as app\tRootViewController:\r\n\r\n```sh  \r\nWindow.RootViewController = new PKTCameraController_SubClass();\r\nstring[] dbNames={\"\"};\r\nPKTCloudRecognitionInfo info = new PKTCloudRecognitionInfo(dbNames);\r\nPKTRecognitionOptions options = new PKTRecognitionOptions(PKTRecognitionStorage.PKTLOCAL, PKTRecognitionMode.PKTRECOGNITION_CONTINUOS_SCAN, info);\r\nStartRecognition(options,this);\r\n```\r\n\r\n4.\tIn the previous example we are using LOCAL marker recognition only(PKTRecognitionStorage.PKTLOCAL), and PKTRecognitionMode.PKTRECOGNITION_CONTINUOS_SCAN as recognition mode. In this case you also need to add marker files.\r\n       \r\nAs second parameter to our StartRecognition()  method we have to pass an nstance of a class implementing the interface PKTIRecognitionListener. In our example we are passing  the AR PKT View Controller itself which need to implements the following callback functions:  \r\n```sh  \r\n#region IPKTIRecognitionListener methods\r\n[Export (\"executingCloudSearch\")]\r\nvoid ExecutingCloudSearch() {\r\n\tConsole.WriteLine(\"ExecutingCloudSearch called!\");\r\n}\r\n\r\n[Export (\"cloudMarkerNotFound\")]\r\nvoid CloudMarkerNotFound() {\r\n\tConsole.WriteLine(\"CloudMarkerNotFound called!\");\r\n}\r\n\r\n[Export (\"internetConnectionNeeded\")]\r\nvoid InternetConnectionNeeded() {\r\n\t   Console.WriteLine(\"InternetConnectionNeeded called!\");\r\n}\r\n\t\r\n[Export (\"markerFound:\")]\r\nvoid MarkerFound(PKTMarker marker) {\r\n\tConsole.WriteLine(\"MarkerFound called with id = {0}!\",marker.Id);\r\n}\r\n\r\n[Export (\"markerNotFound\")]\r\nvoid markerNotFound() {\r\n\tConsole.WriteLine(\"markerNotFound called!\");\r\n}\r\n\r\n[Export (\"markerTrackingLost:\")]\r\nvoid MarkerTrackingLost(string markerId) {\r\n\tConsole.WriteLine(\"MarkerTrackingLost called! with Id = {0}\", markerId);\r\n}\r\n#endregion\r\n```\t\r\nNow you can use the various static functions of the PKTCameraController class to get the state, matrices and marker data of the detected and tracked marker \r\n```sh  \r\n    public virtual void GetCurrentModelViewMatrix (ref IntPtr matrix);\r\n\r\n\tpublic virtual void GetCurrentProjectionMatrix (ref IntPtr matrix);\r\n\t\r\n\tpublic virtual bool isActive ();\r\n\r\n\tpublic virtual bool isTracking ();\r\n\r\n\tpublic virtual void RenderCamera (CGSize viewPortSize, int angle);\r\n```","Hash":"c580a5766bdd6fa343de154fe0ba70bc","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}